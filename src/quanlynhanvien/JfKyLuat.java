/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quanlynhanvien;

import com.itextpdf.text.Document;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Admin
 */
public class JfKyLuat extends javax.swing.JFrame {

    /**
     * Creates new form JfKyLuat
     */
    public JfKyLuat() {
        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        txtTimkiem.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                timkiemkyluat(txtTimkiem.getText().trim());
            }
        });

        cbotennv.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String tenNV = (String) cbotennv.getSelectedItem();
                if (tenNV != null && !tenNV.equals("-- Chọn nhân viên --")) {
                    loadThongTinNhanVien();
                } else {
                    clearThongTinNhanVien();
                }
            }
        });
        loadTenNhanVien();
        laydulieu();
    }
    KyLuat kl = new KyLuat();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtTimkiem = new javax.swing.JTextField();
        lbpb = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbchucvu = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtkl = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        txtMakl = new javax.swing.JTextField();
        btnUpd = new javax.swing.JButton();
        cbotennv = new javax.swing.JComboBox<>();
        btnDel = new javax.swing.JButton();
        lbmanv = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        cbokl = new javax.swing.JComboBox<>();
        btnNhap = new javax.swing.JButton();
        DateNgaykl = new com.toedter.calendar.JDateChooser();
        btnXuat = new javax.swing.JButton();
        btnUpd1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel9.setText("Phòng ban");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel10.setText("Chức vụ");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Mã kỷ luật");

        txtTimkiem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbpb.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbpb.setText("Phòng ban");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Mã nhân viên");

        lbchucvu.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbchucvu.setText("Chức vụ");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Tên nhân viên");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel6.setText("Lý do kỷ luật");

        txtkl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel4.setText("Kỷ luật");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel7.setText("Tìm kiếm");

        jLabel5.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel5.setText("Ngày kỷ luật");

        btnAdd.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setBorder(new javax.swing.border.MatteBorder(null));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtMakl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnUpd.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnUpd.setText("Sửa");
        btnUpd.setBorder(new javax.swing.border.MatteBorder(null));
        btnUpd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdActionPerformed(evt);
            }
        });

        cbotennv.setBorder(new javax.swing.border.MatteBorder(null));

        btnDel.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnDel.setText("Xoá");
        btnDel.setBorder(new javax.swing.border.MatteBorder(null));
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });

        lbmanv.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lbmanv.setText("Mã nhân viên");

        btnReset.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnReset.setText("Reset");
        btnReset.setBorder(new javax.swing.border.MatteBorder(null));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        cbokl.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "-100000", "-200000", "-500000", "-700000", "-1000000", "-2000000", "-3000000", "-4000000", "-5000000", "-10000000" }));
        cbokl.setBorder(new javax.swing.border.MatteBorder(null));

        btnNhap.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnNhap.setText("Nhập");
        btnNhap.setBorder(new javax.swing.border.MatteBorder(null));
        btnNhap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNhapActionPerformed(evt);
            }
        });

        DateNgaykl.setBorder(new javax.swing.border.MatteBorder(null));
        DateNgaykl.setDateFormatString("dd/MM/yyyy");

        btnXuat.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnXuat.setText("Xuất");
        btnXuat.setBorder(new javax.swing.border.MatteBorder(null));
        btnXuat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatActionPerformed(evt);
            }
        });

        btnUpd1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        btnUpd1.setText("Tìm kiếm");
        btnUpd1.setBorder(new javax.swing.border.MatteBorder(null));
        btnUpd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpd1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnUpd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnUpd1, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel10)
                                .addComponent(jLabel2)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cbokl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DateNgaykl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbchucvu)
                                .addComponent(lbpb)
                                .addComponent(lbmanv)
                                .addComponent(cbotennv, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtMakl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtkl, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtMakl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbotennv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbmanv))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lbpb))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(lbchucvu))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(DateNgaykl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbokl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtkl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtTimkiem, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpd1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNhap, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXuat, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1099, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int choice = JOptionPane.showConfirmDialog(
            this,
            "Bạn có chắc chắn muốn thoát?",
            "Xác nhận thoát",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
    );

    if (choice == JOptionPane.YES_OPTION) {
        new Home().setVisible(true); // Mở lại JFrame1 (Home)
        this.dispose(); // Đóng cửa sổ hiện tại
    }

    }//GEN-LAST:event_formWindowClosing

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        themKyLuat();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdActionPerformed
        suaKyLuat();
    }//GEN-LAST:event_btnUpdActionPerformed

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed

        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow == -1) {
            ThongBao("Vui lòng chọn một Kỷ luật để xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String makt = jTable1.getValueAt(selectedRow, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xóa kỷ luật này?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {

            try (Connection conn = connection.getConnection()) {
                String deleteSql = "DELETE FROM Tb_KyLuat WHERE MaKL = ?";
                PreparedStatement psDelete = conn.prepareStatement(deleteSql);
                psDelete.setString(1, makt);

                int rowsAffected = psDelete.executeUpdate();

                if (rowsAffected > 0) {
                    ThongBao("Đã xóa kỷ luật thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                    laydulieu();
                } else {
                    ThongBao("Không tìm thấy kỷ luật với mã đã chọn!", "Thông báo", JOptionPane.WARNING_MESSAGE);
                }
            } catch (Exception e) {
                System.out.println(e.toString());
                ThongBao("Có lỗi xảy ra trong quá trình xóa kỷ luật.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {

            ThongBao("Hủy thao tác xóa!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearForm();

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnNhapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNhapActionPerformed
        Nhandulieu();
    }//GEN-LAST:event_btnNhapActionPerformed

    private void btnXuatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatActionPerformed
        String[] options = {"Xuất PDF", "Xuất Excel", "Hủy"};
        int choice = JOptionPane.showOptionDialog(this,
                "Chọn định dạng bạn muốn xuất:",
                "Xuất dữ liệu",
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (choice == 0) {
            xuatPDF();
        } else if (choice == 1) {
            xuatExcel();
        }
    }//GEN-LAST:event_btnXuatActionPerformed

    private void btnUpd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpd1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnUpd1ActionPerformed
    private void xuatPDF() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Lưu file PDF");
        fileChooser.setSelectedFile(new File("Kyluat.pdf"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(fileToSave));
                document.open();

                PdfPTable pdfTable = new PdfPTable(jTable1.getColumnCount());
                // Thêm tiêu đề
                for (int i = 0; i < jTable1.getColumnCount(); i++) {
                    pdfTable.addCell(new PdfPCell(new Phrase(jTable1.getColumnName(i))));
                }
                // Thêm dữ liệu
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    for (int col = 0; col < jTable1.getColumnCount(); col++) {
                        Object value = jTable1.getValueAt(row, col);
                        pdfTable.addCell(value != null ? value.toString() : "");
                    }
                }

                document.add(pdfTable);
                document.close();
                ThongBao("Xuất PDF thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
                ThongBao("Lỗi khi xuất PDF: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void xuatExcel() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Lưu file Excel");
        fileChooser.setSelectedFile(new File("kyluat.xlsx"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (Workbook workbook = new XSSFWorkbook()) {
                Sheet sheet = workbook.createSheet("DanhSachKyLuat");

                // Tạo hàng tiêu đề
                Row headerRow = sheet.createRow(0);
                for (int i = 0; i < jTable1.getColumnCount(); i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(jTable1.getColumnName(i));
                }

                // Thêm dữ liệu
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    Row excelRow = sheet.createRow(row + 1);
                    for (int col = 0; col < jTable1.getColumnCount(); col++) {
                        Object value = jTable1.getValueAt(row, col);
                        Cell cell = excelRow.createCell(col);
                        cell.setCellValue(value != null ? value.toString() : "");
                    }
                }

                FileOutputStream fileOut = new FileOutputStream(fileToSave);
                workbook.write(fileOut);
                fileOut.close();
                ThongBao("Xuất Excel thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
                ThongBao("Lỗi khi xuất Excel: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void ThongBao(String noiDungThongBao, String tieuDeThongBao, int icon) {
        JOptionPane.showMessageDialog(new JFrame(), noiDungThongBao,
                tieuDeThongBao, icon);
    }

    private void loadTenNhanVien() {
        try {
            cbotennv.removeAllItems();
            cbotennv.addItem("-- Chọn nhân viên --");

            String sql = "SELECT MaNhanVien, TenNhanVien FROM Tb_NhanVien ORDER BY TenNhanVien";
            Connection conn = connection.getConnection();
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                cbotennv.addItem(rs.getString("MaNhanVien") + " - " + rs.getString("TenNhanVien"));
            }

            rs.close();
            pst.close();
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi load danh sách nhân viên: " + e.getMessage());
        }
    }

    private void loadThongTinNhanVien() {
        String selectedItem = cbotennv.getSelectedItem().toString();

        // Giả sử format là "NV01 - Nguyễn Văn A"
        if (!selectedItem.contains(" - ")) {
            return; // Tránh lỗi nếu chọn "-- Chọn nhân viên --"
        }
        String maNhanVien = selectedItem.split(" - ")[0];

        String sql = "SELECT MaNhanVien, PhongBan, ChucVu FROM Tb_NhanVien WHERE MaNhanVien = ?";

        try (Connection conn = connection.getConnection(); PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, maNhanVien);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    lbmanv.setText(rs.getString("MaNhanVien"));
                    lbpb.setText(rs.getString("PhongBan")); // Hiển thị mã phòng ban (nếu cần tên, bạn phải JOIN)
                    lbchucvu.setText(rs.getString("ChucVu"));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi load thông tin nhân viên: " + e.getMessage());
        }
    }

    private void themKyLuat() {
        if (!validateInput()) {
            return;
        }

        // Kiểm tra mã khen thưởng đã tồn tại
        if (kiemTraMaKLTonTai(txtMakl.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Mã kỷ luật đã tồn tại!");
            return;
        }

        String sql = "INSERT INTO Tb_KyLuat (MaKL, MaNhanVien, TenNhanVien, PhongBan, ChucVu, NgayKL, KyLuat, LyDoKL) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conn = connection.getConnection(); PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, txtMakl.getText().trim());
            pst.setString(2, lbmanv.getText());
            pst.setString(3, (String) cbotennv.getSelectedItem());
            pst.setString(4, lbpb.getText());
            pst.setString(5, lbchucvu.getText());

            // Chuyển đổi ngày
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String ngayKT = sdf.format(DateNgaykl.getDate());
            pst.setString(6, ngayKT);

            pst.setString(7, (String) cbokl.getSelectedItem());
            pst.setString(8, txtkl.getText().trim());

            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Thêm kỷ luật thành công!");
                clearForm();
            } else {
                JOptionPane.showMessageDialog(null, "Thêm kỷ luật thất bại!");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi thêm kỷ luật: " + e.getMessage());
        }
        laydulieu();
    }

    private void suaKyLuat() {
        if (!validateInput()) {
            return;
        }

        // Kiểm tra mã khen thưởng có tồn tại không
        if (!kiemTraMaKLTonTai(txtMakl.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Mã kỷ luật không tồn tại!");
            return;
        }

        String sql = "UPDATE Tb_KyLuat SET MaNhanVien = ?, TenNhanVien = ?, PhongBan = ?, ChucVu = ?, NgayKL = ?, KyLuat = ?, LyDoKL = ? WHERE MaKL = ?";

        try (Connection conn = connection.getConnection(); PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, lbmanv.getText());
            pst.setString(2, (String) cbotennv.getSelectedItem());
            pst.setString(3, lbpb.getText());
            pst.setString(4, lbchucvu.getText());

            // Chuyển đổi ngày
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String ngayKT = sdf.format(DateNgaykl.getDate());
            pst.setString(5, ngayKT);

            pst.setString(6, (String) cbokl.getSelectedItem());
            pst.setString(7, txtkl.getText().trim());
            pst.setString(8, txtMakl.getText().trim());

            int result = pst.executeUpdate();

            if (result > 0) {
                JOptionPane.showMessageDialog(null, "Cập nhật kỷ luật thành công!");
            } else {
                JOptionPane.showMessageDialog(null, "Cập nhật kỷ luật thất bại!");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Lỗi cập nhật kỷ luật: " + e.getMessage());
        }
        laydulieu();
    }

    private boolean kiemTraMaKLTonTai(String maKL) {
        String sql = "SELECT COUNT(*) FROM Tb_KyLuat WHERE MaKL = ?";

        try (Connection conn = connection.getConnection(); PreparedStatement pst = conn.prepareStatement(sql)) {

            pst.setString(1, maKL);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
    }

    private boolean validateInput() {
        if (txtMakl.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập mã kỷ luật!");
            txtMakl.requestFocus();
            return false;
        }

        if (cbotennv.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn nhân viên!");
            cbotennv.requestFocus();
            return false;
        }

        if (DateNgaykl.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn ngày kỷ luật!");
            DateNgaykl.requestFocus();
            return false;
        }

        if (cbokl.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn loại kỷ luật!");
            cbokl.requestFocus();
            return false;
        }

        if (txtkl.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập lý do kỷ luật!");
            txtkl.requestFocus();
            return false;
        }

        return true;
    }

    private void timkiemkyluat(String keyword) {
        if (keyword == null || keyword.trim().isEmpty()) {
            laydulieu(); // Gọi lại hàm hiển thị toàn bộ nếu không có từ khóa
            return;
        }

        String sql = "SELECT * FROM Tb_KyLuat WHERE MaKL LIKE ? OR MaNhanVien LIKE ? OR TenNhanVien LIKE ? OR KyLuat LIKE ?";

        try (Connection conn = connection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            String searchPattern = "%" + keyword + "%";
            for (int i = 1; i <= 4; i++) {
                ps.setString(i, searchPattern);
            }

            DefaultTableModel tableModel = new DefaultTableModel(
                    new Object[]{"Mã KL", "Mã NV", "Tên nhân viên", "Phòng ban", "Chức vụ", "Ngày KL", "Kỷ luật", "Lý do KL"}, 0
            );
            jTable1.setModel(tableModel);

            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Object[] item = new Object[8];
                item[0] = rs.getString("MaKL");
                item[1] = rs.getString("MaNhanVien");
                item[2] = rs.getString("TenNhanVien");
                item[3] = rs.getString("PhongBan"); // Vẫn hiển thị mã phòng ban
                item[4] = rs.getString("ChucVu");
                item[5] = rs.getDate("NgayKL");
                item[6] = rs.getString("KyLuat");
                item[7] = rs.getString("LyDoKL");

                tableModel.addRow(item);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            ThongBao("Có lỗi khi tìm kiếm dữ liệu kỷ luật.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void clearForm() {
        txtMakl.setText("");
        cbotennv.setSelectedIndex(0);
        lbmanv.setText("");
        lbpb.setText("");
        lbchucvu.setText("");
        DateNgaykl.setDate(null);
        cbokl.setSelectedIndex(0);
        txtkl.setText("");
    }

    private void clearThongTinNhanVien() {
        lbmanv.setText("");
        lbpb.setText("");
        lbchucvu.setText("");
    }

    private void Nhandulieu() {
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {

            String maKyLuat = jTable1.getValueAt(selectedRow, 0).toString();
            String tenNhanVien = jTable1.getValueAt(selectedRow, 2).toString();
            String maNhanVien = jTable1.getValueAt(selectedRow, 1).toString();
            String PhongBan = jTable1.getValueAt(selectedRow, 3).toString();
            String ChucVu = jTable1.getValueAt(selectedRow, 4).toString();
            Date ngayKl = (Date) jTable1.getValueAt(selectedRow, 5);
            String kyLuat = jTable1.getValueAt(selectedRow, 6).toString();
            String lyDokl = jTable1.getValueAt(selectedRow, 7).toString();

            txtMakl.setText(maKyLuat);
            cbotennv.setSelectedItem(tenNhanVien);
            lbmanv.setText(maNhanVien);
            lbpb.setText(PhongBan);
            lbchucvu.setText(ChucVu);
            DateNgaykl.setDate(ngayKl);

            cbokl.setSelectedItem(kyLuat);

            txtkl.setText(lyDokl);

        }
    }

    private void laydulieu() {
        String sql = "SELECT MaKL, MaNhanVien, TenNhanVien, PhongBan, ChucVu, NgayKL, KyLuat, LyDoKL FROM Tb_KyLuat";

        try (Connection conn = connection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ResultSet rs = ps.executeQuery();

            // Đặt tiêu đề cột đầy đủ
            DefaultTableModel tableModel = new DefaultTableModel(
                    new Object[]{"Mã KL", "Mã NV", "Tên nhân viên", "Phòng ban", "Chức vụ", "Ngày KL", "Kỷ luật", "Lý do KL"}, 0
            );
            jTable1.setModel(tableModel);

            while (rs.next()) {
                Object[] row = new Object[8];
                row[0] = rs.getString("MaKL");
                row[1] = rs.getString("MaNhanVien");
                row[2] = rs.getString("TenNhanVien");
                row[3] = rs.getString("PhongBan");
                row[4] = rs.getString("ChucVu");
                row[5] = rs.getDate("NgayKL");
                row[6] = rs.getString("KyLuat");
                row[7] = rs.getString("LyDoKL");

                tableModel.addRow(row);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            ThongBao("Lỗi khi tải dữ liệu khen thưởng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JfKyLuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JfKyLuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JfKyLuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JfKyLuat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JfKyLuat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateNgaykl;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnNhap;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpd;
    private javax.swing.JButton btnUpd1;
    private javax.swing.JButton btnXuat;
    private javax.swing.JComboBox<String> cbokl;
    private javax.swing.JComboBox<String> cbotennv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbchucvu;
    private javax.swing.JLabel lbmanv;
    private javax.swing.JLabel lbpb;
    private javax.swing.JTextField txtMakl;
    private javax.swing.JTextField txtTimkiem;
    private javax.swing.JTextField txtkl;
    // End of variables declaration//GEN-END:variables
}
